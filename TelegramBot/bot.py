from telebot.types import ReplyKeyboardMarkup, KeyboardButton
from telebot.types import ReplyKeyboardRemove
from datetime import datetime,date,time
from telebot import TeleBot, types
from requests.utils import quote
from secret import *
import psycopg2
import logging
import requests


TEACHER_CHAT_ID = TEACHER_CHAT_ID_SC
TEACHER_BOT_TOKEN = TEACHER_BOT_TOKEN_SC

bot = TeleBot(bot_sc)

#Comandaho
commands = [
    types.BotCommand('/start', '–ë–∞—Ä–æ–∏ –æ“ì–æ–∑ –∫–∞—Ä–¥–∞–Ω–∏ –∫–æ—Ä –±–æ –±–æ—Ç'),
    types.BotCommand('/help', '–ö—É–º–∞–∫—Ä–∞—Å–æ–Ω–∏ –≤–∞ —Ç–∞—Ä–∑–∏ –∏—Å—Ç–∏—Ñ–æ–¥–∞–∏ –±–æ—Ç'),
    types.BotCommand('/buttons', '–¢—É–≥–º–∞“≥–æ–∏ –∞—Å–æ—Å”£'),
    types.BotCommand('/switch_to_a_new_group', '–ì—É–∑–∞—à—Ç–∞–Ω –±–∞ –≥—É—Ä”Ø“≥–∏ –Ω–∞–≤')
]
try:
    bot.set_my_commands(commands)
    print("Commands set successfully.")
except Exception as e:
    print(f"An error occurred: {e}")


#Payvast shudan ba database va close
def connection_database():
    connection = psycopg2.connect(
        database=database_sc,
        user=user_sc,
        host=host_sc,
        password=password_sc,
        port=port_sc
    )
    return connection

def close_connection(conn, cur):
    cur.close()
    conn.close()
##########################----------------------------------------------------------------------------------------------##########################


#Soakhtani Tablitsa
# def create_table_users():
#     conn = connection_database()
#     cur = conn.cursor()
#     try:
#         cur.execute("""
#             CREATE TABLE IF NOT EXISTS USERS(
#                 USER_ID VARCHAR(150) PRIMARY KEY,
#                 FIRST_NAME VARCHAR(50),
#                 LAST_NAME VARCHAR(50),
#                 USERNAME VARCHAR(100),
#                 GROUP_NAME VARCHAR(50),
#                 ADDRESS VARCHAR(150) NULL,
#                 PHONE_NUMBER VARCHAR(13) NULL,
#                 EMAIL VARCHAR(100) NULL,
#                 DATE_OF_BIRTH DATE NULL,
#                 IS_ACTIVE BOOLEAN DEFAULT TRUE,
#                 REGISTRATION_DATE TIMESTAMP NULL
#             )
#         """)
#         conn.commit()
#         print("USERS table created successfully")
#     except Exception as e:
#         print(f'Error: {str(e)}')
#     finally:
#         close_connection(conn, cur)

# def create_table_came_and_went():
#     conn = connection_database()
#     cur = conn.cursor()
#     try:
#         cur.execute("""
#             CREATE TABLE IF NOT EXISTS my_app_comeandwent(
#                 CW_ID SERIAL PRIMARY KEY,
#                 USER_ID VARCHAR(150),
#                 TIME_TO_COME TIMESTAMP null,
#                 TIME_TO_GO TIMESTAMP NULL,
#                 ABSENT_REASON TEXT NULL,
#                 LATE_REASON TEXT NULL,
#                 DATE DATE DEFAULT CURRENT_DATE,
#                 FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID)
#             )
#         """)
#         conn.commit()
#         print("my_app_comeandwent table created successfully")
#     except Exception as e:
#         print(f'Error: {str(e)}')
#     finally:
#         close_connection(conn, cur)

# def create_table_feedbacks():
#     conn = connection_database()
#     cur = conn.cursor()
#     try:
#         cur.execute("""
#             CREATE TABLE IF NOT EXISTS FEEDBACK(
#                 FDB_ID SERIAL PRIMARY KEY,
#                 FEEDBACK_TEXT TEXT NULL,
#                 SUBMISSION_TIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP NULL,
#                 USER_ID VARCHAR(150) NOT NULL,
#                 FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID)
#             )
#         """)
#         conn.commit()
#     except Exception as e:
#         print(f'Error {e}')
#     finally:
#         close_connection(conn, cur)
##########################----------------------------------------------------------------------------------------------##########################


#Ilovakunii user ba jadval
def add_user_in_table(user_id, first_name, last_name, username, group_name='', address='', phone_number='', email='', date_of_birth=None, is_active=True, registration_date=None):
    if registration_date is None:
        registration_date = datetime.now().strftime('%Y-%m-%d %H:%M')
    conn = connection_database()
    cur = conn.cursor()
    try:
        cur.execute("""
            INSERT INTO api_customeruser(
                user_id, first_name, last_name, username, group_name, address, phone_number, email, date_of_birth, is_active, registration_date
            ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
            ON CONFLICT (user_id) DO NOTHING
        """, (user_id, first_name, last_name, username, group_name, address, phone_number, email, date_of_birth, is_active, registration_date))
        conn.commit()
        print(f"User {user_id} added successfully.")
    except Exception as e:
        print(f'Error occurred while adding user {user_id}: {str(e)}')
        conn.rollback()  
    finally:
        close_connection(conn, cur)

def update_user_data(user_id, column, value):
    conn = connection_database()
    cur = conn.cursor()
    try:
        cur.execute(f"UPDATE api_customeruser SET {column} = %s WHERE user_id = %s", (value, str(user_id)))
        conn.commit()
    except Exception as e:
        print(f'Error: {str(e)}')
    finally:
        close_connection(conn, cur)

def check_user_data(user_id):
    conn = connection_database()
    cur = conn.cursor()
    try:
        cur.execute("SELECT * FROM api_customeruser WHERE user_id = %s", (str(user_id),))
        user_data = cur.fetchone()
        return user_data
    except Exception as e:
        print(f'Error: {str(e)}')
        return None
    finally:
        close_connection(conn, cur)
##########################----------------------------------------------------------------------------------------------##########################


#Giriftani nom nasab va username az chat
def update_first_name(message):
    if message.text=='/start' or message.text=='/help':
        bot.send_message(message.chat.id,'–ò–Ω –∫–æ–º–∞–Ω–¥–∞ –∞—Å—Ç!',)
        start(message)
    else:
        first_name = message.text
        user_id = message.chat.id
        logging.info(f'Updating first name for user {user_id}')
        update_user_data(user_id, 'first_name', first_name)
        check_user_data_and_ask_for_missing(user_id, message)

def update_last_name(message):
    if message.text=='/start' or message.text=='/help':
        bot.send_message(message.chat.id,'–ò–Ω –∫–æ–º–∞–Ω–¥–∞ –∞—Å—Ç!',)
        start(message)
    else: 
        last_name = message.text
        user_id = message.chat.id
        logging.info(f'Updating last name for user {user_id}')
        update_user_data(user_id, 'last_name', last_name)
        check_user_data_and_ask_for_missing(user_id, message)

def update_username(message):
    if message.text=='/start' or message.text=='/help':
        bot.send_message(message.chat.id,'–ò–Ω –∫–æ–º–∞–Ω–¥–∞ –∞—Å—Ç!',)
        start(message)
    else:
        username = message.text
        user_id = message.chat.id
        logging.info(f'Updating username for user {user_id}')
        update_user_data(user_id, 'username', username)
        check_user_data_and_ask_for_missing(user_id, message)
##########################----------------------------------------------------------------------------------------------##########################


#Giriftani Soli tavalud az chat      
def get_date_of_birth(message):
    user_id = message.chat.id
    msg = bot.send_message(user_id, '–°–∞–Ω–∞–∏ —Ç–∞–≤–∞–ª—É–¥–∞—Ç–æ–Ω—Ä–æ –¥–æ—Ö–∏–ª –∫—É–Ω–µ–¥ –±–æ —á—É–Ω–∏–Ω —Ñ–æ—Ä–º–∞—Ç: (YYYY-MM-DD) üòä')
    bot.register_next_step_handler(msg, update_date_of_birth)   
   
def update_date_of_birth(message):
    if message.text=='/start' or message.text=='/help':
        bot.send_message(message.chat.id,'–ò–Ω –∫–æ–º–∞–Ω–¥–∞ –∞—Å—Ç!',)
        start(message)
    else:
        date_of_birth = message.text
        user_id = message.chat.id
        update_user_data(user_id, 'date_of_birth', date_of_birth)
        check_user_data_and_ask_for_missing(user_id, message)
##########################----------------------------------------------------------------------------------------------##########################


#Giriftani suroga az chat
def get_address(message):
    msg = bot.send_message(message.chat.id, '–°—É—Ä–æ“ì–∞–∞—Ç–æ–Ω—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥ üòä')
    bot.register_next_step_handler(msg, process_address)

def process_address(message):
    address = message.text
    user_id = message.chat.id
    if address.startswith('/') or address.strip() == "":
        bot.send_message(user_id, '–ò–Ω –∫–æ–º–∞–Ω–¥–∞  –¥—É—Ä—É—Å—Ç –Ω–µ—Å—Ç. –õ—É—Ç—Ñ–∞–Ω, —Å—É—Ä–æ“ì–∞–∞—Ç–æ–Ω—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥ üòä')
        get_address(message)
    else:
        logging.info(f'Updating address for user {user_id}')
        update_user_data(user_id, 'address', address)
        check_user_data_and_ask_for_missing(user_id, message)

def update_address(message):
    if message.text in ['/start', '/help']:
        bot.send_message(message.chat.id, '–ò–Ω –∫–æ–º–∞–Ω–¥–∞ –∞—Å—Ç!')
        start(message)
    else:
        process_address(message)
##########################----------------------------------------------------------------------------------------------##########################

 
#Girihtani raqami telefon az chat
def get_phone_number(message):
    msg = bot.send_message(message.chat.id, '–†–∞“õ–∞–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞—Ç–æ–Ω—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥ üòä')
    bot.register_next_step_handler(msg, process_phone_number)

def process_phone_number(message):
    phone_number = message.text
    user_id = message.chat.id

    if phone_number.startswith('/') or phone_number.strip() == "":
        bot.send_message(user_id, '–ò–Ω –∫–æ–º–∞–Ω–¥–∞ —ë —Ä–∞“õ–∞–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –¥—É—Ä—É—Å—Ç –Ω–µ—Å—Ç. –õ—É—Ç—Ñ–∞–Ω, —Ä–∞“õ–∞–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞—Ç–æ–Ω—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥ üòä')
        get_phone_number(message)  
    else:
        logging.info(f'Updating phone number for user {user_id}')
        update_user_data(user_id, 'phone_number', phone_number)
        check_user_data_and_ask_for_missing(user_id, message)

def update_phone_number(message):
    if message.text in ['/start', '/help']:
        bot.send_message(message.chat.id, '–ò–Ω –∫–æ–º–∞–Ω–¥–∞ –∞—Å—Ç!')
        start(message)
    else:
        process_phone_number(message)
##########################----------------------------------------------------------------------------------------------##########################
    
        
#Giriftani Email az chat
def get_email(message):
    msg = bot.send_message(message.chat.id, '–ü–æ—á—Ç–∞–∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω”£ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥ üòä')
    bot.register_next_step_handler(msg, process_email)

def process_email(message):
    email = message.text
    user_id = message.chat.id

    if email.startswith('/') or email.lower() in ['/start', '/help']:
        bot.send_message(user_id, '–ò–Ω –∫–æ–º–∞–Ω–¥–∞ –∞—Å—Ç!')
        start(message)
    else:
        logging.info(f'Updating email for user {user_id}')
        update_user_data(user_id, 'email', email)
        check_user_data_and_ask_for_missing(user_id, message)

def update_email(message):
    if message.text in ['/start', '/help']:
        bot.send_message(message.chat.id, '–ò–Ω –∫–æ–º–∞–Ω–¥–∞ –∞—Å—Ç!')
        start(message)
    else:
        process_email(message)
##########################----------------------------------------------------------------------------------------------##########################
 
def check_user_data_and_ask_for_missing(user_id, message):
    user_data = check_user_data(user_id)
    
    if not user_data[1]:
        msg = bot.send_message(user_id, '–ù–∞–º–∞—Ç–æ–Ω—Ä–æ –¥–æ—Ö–∏–ª –∫—É–Ω–µ–¥ üòä')
        bot.register_next_step_handler(msg, update_first_name)
    elif not user_data[2]:
        msg = bot.send_message(user_id, '–ù–∞—Å–∞–±–∞—Ç–æ–Ω—Ä–æ –¥–æ—Ö–∏–ª –∫—É–Ω–µ–¥ üòä')
        bot.register_next_step_handler(msg, update_last_name)
    elif not user_data[3]:
        msg = bot.send_message(user_id, 'Telegram –∞–∫–∞—É–Ω—Ç–∏ —Ö—É–¥—Ä–æ –¥–æ—Ö–∏–ª –∫—É–Ω–µ–¥ üòä')
        bot.register_next_step_handler(msg, update_username)
    elif not user_data[4]:
        get_group_name(message)
    elif not user_data[5]:
        msg = bot.send_message(user_id, '–°—É—Ä–æ“ì–∞–∞—Ç–æ–Ω—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥ üòä')
        bot.register_next_step_handler(msg, update_address)
    elif not user_data[6]:
        msg = bot.send_message(user_id, '–†–∞“õ–∞–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—Ä–æ –¥–æ—Ö–∏–ª –∫—É–Ω–µ–¥ üòä')
        bot.register_next_step_handler(msg, update_phone_number)  
    elif not user_data[7]:
        msg = bot.send_message(user_id, '–ü–æ—á—Ç–∞–∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω”£ —Ö—É–¥—Ä–æ –¥–æ—Ö–∏–ª –∫—É–Ω–µ–¥ (***@gmail.com) –∞–≥–∞—Ä –Ω–∞–¥–æ—à—Ç–∞ –±–æ—à–µ–¥ –Ω–∞–¥–æ—Ä–∞–º –Ω–∞–≤–∏—Å–µ–¥ üòä')
        bot.register_next_step_handler(msg, update_email)
    elif not user_data[8]:
        msg = bot.send_message(user_id, '–°–∞–Ω–∞–∏ —Ç–∞–≤–∞–ª—É–¥–∞—Ç–æ–Ω—Ä–æ –¥–æ—Ö–∏–ª –∫—É–Ω–µ–¥ –±–æ –∏–Ω —Ç–∞—Ä–∑: (YYYY-MM-DD) üòä')
        bot.register_next_step_handler(msg, update_date_of_birth)
    else:
        bot.send_message(message.chat.id, '–®—É–º–æ –±–æ –º—É–≤–∞—Ñ–∞“õ–∏—è—Ç –±–∞ “õ–∞–π–¥ –≥–∏—Ä–∏—Ñ—Ç–∞ —à—É–¥–µ–¥.')
        send_message_bot(user_id)


#Giriftani vaqti omadan
def check_time_to_come(user_id):
    conn = connection_database()
    cur = conn.cursor()
    try:
        today = date.today()
        cur.execute("""
            SELECT time_to_come, time_to_go FROM api_comeandwent
            WHERE user_id = %s AND date = %s
        """, (str(user_id), today))
        result = cur.fetchone()
        return result
    except Exception as e: 
        print(f'Error: {str(e)}')
        return None
    finally:
        close_connection(conn, cur)

def add_time_to_come(user_id):
    conn = connection_database()
    cur = conn.cursor()
    try:
        existing_times = check_time_to_come(user_id)
        if existing_times:
            time_to_come, time_to_go = existing_times
            if time_to_go:
                bot.send_message(user_id, '–¢—É –∞–ª–∞–∫–∞–π —Ä–∞—Ñ—Ç–∞–∏–∏!')
            else:
                bot.send_message(user_id, f'–í–∞“õ—Ç–∏ –æ–º–∞–¥–∞–Ω–∏ —à—É–º–æ –∏–ª–æ–≤–∞ –∫–∞—Ä–¥–∞ —à—É–¥–∞ –±—É–¥:  –ú–µ—Ö–æ“≥–µ–¥ —Ç–∞—ä“ì–∏—Ä –¥–∏“≥–µ–¥?')
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                btn_ha = types.KeyboardButton('“≤–∞')
                btn_ne = types.KeyboardButton('–ù–µ')
                markup.add(btn_ha, btn_ne)
                bot.send_message(user_id, '–¢–∞—Å–¥–∏“õ –∫—É–Ω–µ–¥ “≤–∞ —ë –ù–µ:', reply_markup=markup)
                bot.register_next_step_handler_by_chat_id(user_id, update_arrival)
        else:
            now = datetime.now()
            time_to_come = now.strftime('%Y-%m-%d %H:%M')
            cur.execute("""
                INSERT INTO api_comeandwent(user_id, time_to_come, date) VALUES
                (%s, %s, %s)""", (str(user_id), time_to_come, now.date())) 
            conn.commit()
            bot.send_message(user_id, f'–í–∞“õ—Ç–∏ –æ–º–∞–¥–∞–Ω —à—É–º–æ –∏–ª–æ–≤–∞ –∫–∞—Ä–¥–∞ —à—É–¥: {time_to_come}') 
    except Exception as e:
        print(f'Error: {str(e)}')
    finally:
        close_connection(conn, cur)

def update_arrival(message): 
    user_id = message.chat.id
    if message.text == '“≤–∞':
        time_to_come = datetime.now().strftime('%Y-%m-%d %H:%M')
        conn = connection_database()
        cur = conn.cursor()
        try:    
            cur.execute("""
                UPDATE api_comeandwent SET time_to_come = %s WHERE user_id = %s AND date = %s
            """, (time_to_come, str(user_id), date.today()))
            conn.commit()
            bot.send_message(user_id, f'–í–∞“õ—Ç–∏ –æ–º–∞–¥–∞–Ω–∏ —à—É–º–æ –∏–≤–∞–∑ –∫–∞—Ä–¥–∞ —à—É–¥: {time_to_come}') 
            send_message_bot(message.chat.id)
        except Exception as e:
            print(f'Error: {str(e)}')
        finally:
            close_connection(conn, cur)
    elif message.text == '–ù–µ':
        bot.send_message(user_id, '–¢–∞—à–∞–∫–∫—É—Ä! –ú–æ –≤–∞“õ—Ç–∞—Ç–æ–Ω—Ä–æ –∏–≤–∞–∑ –Ω–∞–º–µ–∫—É–Ω–µ–º.')
        send_message_bot(message.chat.id)


#Giriftani vaqti raftan
def check_time_to_go(user_id):
    conn = connection_database()
    cur = conn.cursor()
    try:
        today = date.today()
        cur.execute("""
            SELECT time_to_go FROM api_comeandwent
            WHERE user_id = %s AND date = %s
        """, (str(user_id), today))
        result = cur.fetchone()
        return result
    except Exception as e:
        print(f'Error: {str(e)}')
        return None
    finally:
        close_connection(conn, cur)

def add_time_to_go(user_id):
    existing_time = check_time_to_go(user_id)
    arrival_time = check_time_to_come(user_id)
    today = datetime.now().date()

    if not arrival_time or arrival_time[0] is None:
        bot.send_message(user_id, '–®—É–º–æ “≥–æ–ª–æ –æ–º–∞–¥–∞–≥–∏ –Ω–µ—Å—Ç–µ–¥ –∫—É“∑–æ –º–µ—Ä–∞–≤–µ–¥')
        return

    if existing_time:
        if existing_time[0] is not None and existing_time[0].date() == today:
            bot.send_message(user_id, '–®—É–º–æ –º–µ—Ç–∞–≤–æ–Ω–µ–¥ –≤–∞“õ—Ç–∏ —Ä–∞—Ñ—Ç–∞–Ω—Ä–æ —Ç–∞–Ω“≥–æ —è–∫ –º–∞—Ä–æ—Ç–∏–±–∞ –¥–∞—Ä —è–∫ —Ä”Ø–∑ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥.')
        else:
            try:
                conn = connection_database()
                cur = conn.cursor()
                time_to_go = datetime.now().strftime('%Y-%m-%d %H:%M')
                cur.execute("""
                   UPDATE api_comeandwent
                   SET time_to_go = %s
                   WHERE user_id = %s AND date = %s
                  """, (time_to_go, str(user_id), today))
                conn.commit()
                bot.send_message(user_id, f'–í–∞“õ—Ç–∏ —Ä–∞—Ñ—Ç–∞–Ω–∏ —à—É–º–æ —Å–∞–±—Ç —à—É–¥: {time_to_go}')
            except Exception as e:
                print(f'Error updating departure time: {str(e)}')
            finally:
                close_connection(conn, cur)
    else:
        try:
            conn = connection_database()
            cur = conn.cursor()
            time_to_go = datetime.now().strftime('%Y-%m-%d %H:%M')
            cur.execute("""
               INSERT INTO api_comeandwent (user_id, time_to_go, date)
               VALUES (%s, %s, %s)
              """, (str(user_id), time_to_go, today))
            conn.commit()
            bot.send_message(user_id, f'–í–∞“õ—Ç–∏ —Ä–∞—Ñ—Ç–∞–Ω–∏ —à—É–º–æ —Å–∞–±—Ç —à—É–¥: {time_to_go}')
        except Exception as e:
            print(f'Error adding departure time: {str(e)}')
        finally:
            close_connection(conn, cur)
##########################----------------------------------------------------------------------------------------------##########################


#Giriftani Feedback
def add_feedback(user_id, feedback_text):
    conn = connection_database()
    if conn:
        cur = conn.cursor()
        try:
            date = datetime.now().strftime('%Y-%m-%d %H:%M')
            cur.execute("""
                INSERT INTO api_feedback (user_id, submission_time, feedback_text) VALUES (%s, %s, %s)
            """, (str(user_id), date, feedback_text))
            conn.commit()
        except Exception as e:
            print(f'Error: {str(e)}')
        finally:
            close_connection(conn, cur)
            
def ask_for_feedback(user_id):
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    back_button = types.KeyboardButton('–ë–∞ “õ–∞—Ñ–æ')
    markup.add(back_button)
    
    msg = bot.send_message(user_id, "–õ—É—Ç—Ñ–∞–Ω, –§–∏–∫—Ä—É –∞–Ω–¥–µ—à–∞–∞—Ç–æ–Ω—Ä–æ –Ω–∏—Å–±–∞—Ç –±–∞ –±–∞—Ä–Ω–æ–º–∞ –Ω–∞–≤–∏—Å–µ–¥ üòä:", reply_markup=markup)
    bot.register_next_step_handler(msg, process_feedback)

def process_feedback(message):
    user_id = message.chat.id
    feedback_text = message.text

    if feedback_text.lower() == '–±–∞ “õ–∞—Ñ–æ':  
        bot.send_message(user_id, "–®—É–º–æ –±–∞ –º–µ–Ω—é–∏ –∞—Å–æ—Å”£ –±–∞—Ä–≥–∞—à—Ç–µ–¥.", reply_markup=types.ReplyKeyboardRemove())
        send_message_bot(user_id) 
        return

    add_feedback(user_id, feedback_text)
    bot.send_message(user_id, "–¢–∞—à–∞–∫–∫—É—Ä –±–∞—Ä–æ–∏ –§–∏–∫—Ä—É –∞–Ω–¥–µ—à–∞“≥–æ –Ω–∏—Å–±–∞—Ç –±–∞ –±–∞—Ä–Ω–æ–º–∞ üôè!")
    send_message_bot(user_id) 
##########################----------------------------------------------------------------------------------------------##########################


#giriftani sababi der kardan ba dars 
def ask_the_reason_for_the_delay(user_id):
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    back_button = types.KeyboardButton('–ë–∞ “õ–∞—Ñ–æ') 
    markup.add(back_button)
    bot.send_message(user_id, '–°–∞–±–∞–±–∏ –¥–µ—Ä–∫–∞—Ä–¥–∞–Ω–∞—Ç–æ–Ω—Ä–æ –º–µ–≥—É—Ñ—Ç–µ–¥? ü§®', reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(user_id, the_reason_for_being_late)

def the_reason_for_being_late(message):
    user_id = message.chat.id
    reason = message.text
    
    if reason.lower() == '–±–∞ “õ–∞—Ñ–æ': 
        bot.send_message(user_id, "–®—É–º–æ –±–∞ –º–µ–Ω—é–∏ –∞—Å–æ—Å”£ –±–∞—Ä–≥–∞—à—Ç–µ–¥.", reply_markup=types.ReplyKeyboardRemove())
        send_message_bot(user_id) 
        return
    
    if check_time_to_come_empty(user_id):
        bot.send_message(user_id, "–ú–∞–Ω —Å–∞–±–∞–±–∏ –¥–µ—Ä –∫–∞—Ä–¥–∞–Ω–∞—Ç–æ–Ω—Ä–æ –±–∞ –º—É–∞–ª–ª–∏–º–∞—Ç–æ–Ω —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞–º. –û–Ω–∫–∞—Å –∫–∞–º—Ç–∞—Ä –ø–∞—Å –±–∞ —à—É–º–æ “∑–∞–≤–æ–± —Ö–æ“≥–∞–Ω–¥ –¥–æ–¥!")
        reason_to_teachers(user_id, reason)
        record_late_reason(user_id, reason)
        send_message_bot(message.chat.id)
    else:
        bot.send_message(user_id, "–®—É–º–æ –∏–º—Ä”Ø–∑ –æ–º–∞–¥–∞–µ–¥, —á–∏—Ö–µ–ª –¥–µ—Ä –º–µ–∫—É–Ω–µ–¥.")
        send_message_bot(user_id)

def check_time_to_come_empty(user_id):
    conn = connection_database()
    cur = conn.cursor()
    try:
        cur.execute("SELECT time_to_come FROM api_comeandwent WHERE user_id = %s AND date = CURRENT_DATE", (str(user_id),))
        time_to_come = cur.fetchone()
        if time_to_come and time_to_come[0] is not None:
            return False
        return True
    except Exception as e:
        print(f"Error: {str(e)}")
        return False
    finally:
        close_connection(conn, cur)

def reason_to_teachers(user_id, reason):
    conn = connection_database()
    cur = conn.cursor()
    try:
        cur.execute("SELECT first_name, last_name, username, group_name FROM api_customeruser WHERE user_id = %s", (str(user_id),))
        user_info = cur.fetchone()
        if user_info:
            first_name, last_name, username, group_name = user_info
            message_to_teachers = f"""
–î–æ–Ω–∏—à“∑”Ø --> {first_name.upper()} {last_name.upper()}
–ê–∑ –≥—É—Ä”Ø“≥–∏ --> {group_name.upper()}
–¢–µ–ª–µ–≥—Ä–∞–º –∞–∫–∞—É–Ω—Ç --> @{username}

–°–∞–±–∞–±–∏ –¥–µ—Ä –∫–∞—Ä–¥–∞–Ω–∞—à:
{reason}
"""
            escaped_message = message_to_teachers.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;").replace('"', "&quot;").replace("'", "&#39;")
            response = requests.post(
                f"https://api.telegram.org/bot{TEACHER_BOT_TOKEN}/sendMessage",
                params={
                    'chat_id': TEACHER_CHAT_ID,
                    'text': escaped_message,
                    'parse_mode': 'HTML'  
                }
            )
            if response.status_code == 200:
                print("Message sent successfully")
            else:
                print(f"Failed to send message. Status code: {response.status_code}")
                print(response.text)
        else:
            print(f"User information not found for user_id: {user_id}")

    except Exception as e:
        print(f"Error: {str(e)}")
    finally:
        close_connection(conn, cur)

def record_late_reason(user_id, reason):
    conn = connection_database()
    cur = conn.cursor()
    try:
        cur.execute("SELECT id FROM api_comeandwent WHERE user_id = %s AND date = CURRENT_DATE", (str(user_id),))
        cw_id = cur.fetchone()

        if cw_id:
            cur.execute("UPDATE api_comeandwent SET late_reason = %s WHERE id = %s", (reason, cw_id[0]))
        else:
            cur.execute("INSERT INTO api_comeandwent (user_id, late_reason, date) VALUES (%s, %s, CURRENT_DATE)", (str(user_id), reason))
        
        conn.commit()
        print("Late reason recorded successfully")

    except Exception as e:
        print(f"Error: {str(e)}")
    finally:
        close_connection(conn, cur)
##########################----------------------------------------------------------------------------------------------##########################


#Giriftani sababi naomadan
def ask_for_absence_reason(user_id):
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    back_button = types.KeyboardButton('–ë–∞ “õ–∞—Ñ–æ')
    markup.add(back_button)
    bot.send_message(user_id, "–ë–∞ –¥–∞—Ä—Å –Ω–∞–æ–º–∞–¥–∞–Ω –æ“õ–∏–±–∞—Ç“≥–æ–∏ –Ω–æ—Ö—É–± –¥–æ—Ä–∞–¥. –õ—É—Ç—Ñ–∞–Ω, —Å–∞–±–∞–±–∏ –Ω–∞–æ–º–∞–¥–∞–Ω–∞—Ç–æ–Ω—Ä–æ –≥”Ø–µ–¥.", reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(user_id, process_absence_reason)

def process_absence_reason(message):
    user_id = message.chat.id
    reason = message.text
    if reason.lower() == '–±–∞ “õ–∞—Ñ–æ':  
        bot.send_message(user_id, "–®—É–º–æ –±–∞ –º–µ–Ω—é–∏ –∞—Å–æ—Å”£ –±–∞—Ä–≥–∞—à—Ç–µ–¥.", reply_markup=types.ReplyKeyboardRemove())
        send_message_bot(user_id) 
        return

    if check_time_to_come_empty(user_id):
        bot.send_message(user_id, "–ú–∞–Ω —Å–∞–±–∞–±–∏ –Ω–∞–æ–º–∞–¥–∞–Ω–∞—Ç–æ–Ω—Ä–æ –±–∞ –º—É–∞–ª–ª–∏–º–∞—Ç–æ–Ω —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞–º. –û–Ω–∫–∞—Å –∫–∞–º–µ –¥–µ—Ä—Ç–∞—Ä –±–∞ —à—É–º–æ “∑–∞–≤–æ–± —Ö–æ“≥–∞–Ω–¥ –¥–æ–¥.")
        send_reason_to_teachers(user_id, reason)
        record_absence_reason(user_id, reason)
        send_message_bot(message.chat.id)

    else:
        bot.send_message(user_id, "–®—É–º–æ –∏–º—Ä”Ø–∑ –æ–º–∞–¥–∞–µ–¥, —á–∏—Ö–µ–ª –æ–º–∞–¥–∞ –Ω–∞–º–µ—Ç–∞–≤–æ–Ω–µ–¥.")
        send_message_bot(user_id) 

def send_reason_to_teachers(user_id, reason):
    conn = connection_database()
    cur = conn.cursor()
    try:
        cur.execute("SELECT first_name, last_name, username, group_name FROM api_customeruser WHERE user_id = %s", (str(user_id),))
        user_info = cur.fetchone()
        if user_info:
            first_name, last_name, username, group_name = user_info
            message_to_teachers = f"""
–î–æ–Ω–∏—à“∑”Ø --> {first_name} {last_name}
–ê–∑ –≥—É—Ä”Ø“≥–∏ --> {group_name}
–¢–µ–ª–µ–≥—Ä–∞–º –∞–∫–∞—É–Ω—Ç --> @{username}

–°–∞–±–∞–±–∏ –Ω–∞–æ–º–∞–¥–∞–Ω–∞—à:
{reason}
"""
            escaped_message = message_to_teachers.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;").replace('"', "&quot;").replace("'", "&#39;")
            response = requests.post(
                f"https://api.telegram.org/bot{TEACHER_BOT_TOKEN}/sendMessage",
                params={
                    'chat_id': TEACHER_CHAT_ID,
                    'text': escaped_message,
                    'parse_mode': 'HTML'
                }
            )
            if response.status_code == 200:
                print("Message sent successfully")
            else:
                print(f"Failed to send message. Status code: {response.status_code}")
                print(response.text)
        else:
            print(f"User information not found for user_id: {user_id}")
    except Exception as e:
        print(f"Error: {str(e)}")
    finally:
        close_connection(conn, cur)

def record_absence_reason(user_id, reason):
    conn = connection_database()
    cur = conn.cursor()
    try:
        cur.execute("SELECT id FROM api_comeandwent WHERE user_id = %s AND date = CURRENT_DATE", (str(user_id),))
        cw_id = cur.fetchone()

        if cw_id:
            cur.execute("UPDATE api_comeandwent SET absent_reason = %s WHERE id = %s", (reason, cw_id[0]))
        else:
            cur.execute("INSERT INTO api_comeandwent (user_id, absent_reason, date) VALUES (%s, %s, CURRENT_DATE)", (str(user_id), reason))
        
        conn.commit()
        print("Absence reason recorded successfully")

    except Exception as e:
        print(f"Error: {str(e)}")
    finally:
        close_connection(conn, cur)
##########################----------------------------------------------------------------------------------------------##########################


#Comandai Start
@bot.message_handler(commands=['start'])
def start(message):
   
    user_id = message.chat.id
    user_data = check_user_data(user_id)
    if user_data:
        if not user_data[1]:
            msg = bot.send_message(user_id, '–ù–∞–º–∞—Ç–æ–Ω—Ä–æ –¥–æ—Ö–∏–ª –∫—É–Ω–µ–¥ üòä')
            bot.register_next_step_handler(msg, update_first_name)
        elif not user_data[2]:
            msg = bot.send_message(user_id, '–ù–∞—Å–∞–±–∞—Ç–æ–Ω—Ä–æ –¥–æ—Ö–∏–ª –∫—É–Ω–µ–¥ üòä')
            bot.register_next_step_handler(msg, update_last_name)
        elif not user_data[3]:
            msg = bot.send_message(user_id, 'Telegram –∞–∫–∞—É–Ω—Ç–∏ —Ö—É–¥—Ä–æ –¥–æ—Ö–∏–ª –∫—É–Ω–µ–¥ üòä')
            bot.register_next_step_handler(msg, update_username)
        elif not user_data[4]:
            get_group_name(message)
        elif not user_data[5]:
            get_address(message)
        elif not user_data[6]:
            get_phone_number(message)
        elif not user_data[7]:
            get_email(message)
        elif not user_data[8]:
            get_date_of_birth(message)
        else:
            send_message_bot(user_id)
    else:
        first_name = message.chat.first_name or ''
        last_name = message.chat.last_name or ''
        username = message.chat.username or ''
        registration_date = datetime.now().strftime('%Y-%m-%d %H:%M')
                
        add_user_in_table(user_id, first_name, last_name, username,registration_date)

        if not first_name:
            msg = bot.send_message(user_id, '–ù–∞–º–∞—Ç–æ–Ω—Ä–æ –¥–æ—Ö–∏–ª –∫—É–Ω–µ–¥ üòä')
            bot.register_next_step_handler(msg, update_first_name)
        elif not last_name:
            msg = bot.send_message(user_id, '–ù–∞—Å–∞–±–∞—Ç–æ–Ω—Ä–æ –¥–æ—Ö–∏–ª –∫—É–Ω–µ–¥ üòä')
            bot.register_next_step_handler(msg, update_last_name)
        elif not username:
            msg = bot.send_message(user_id, 'Telegram –∞–∫–∞—É–Ω—Ç–∏ —Ö—É–¥—Ä–æ –¥–æ—Ö–∏–ª –∫—É–Ω–µ–¥ üòä')
            bot.register_next_step_handler(msg, update_username)
        else:
            get_group_name(message)
##########################----------------------------------------------------------------------------------------------##########################


#Comandai help
@bot.message_handler(commands=['help'])
def helping(message):
    bot.send_message(message.chat.id, f"""
    –ò–Ω –±–æ—Ç –±–∞—Ä–æ–∏ “≥–∞—Å—Ç—É –Ω–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ“≥–æ–∏ SoftClub –º–µ–±–æ—à–∞–¥.
    
    1.–ë–∞—Ä–æ–∏ –∏—Å—Ç–∏—Ñj–¥–∞ –±—É—Ä–¥–∞–Ω–∏ –±–æ—Ç –∞–∑ “õ–∏—Å–º–∞—Ç–∏ –º–µ–Ω—é /start -
    —Ä–æ –ø–∞—Ö—à –Ω–∞–º–æ–µ–¥ —Ç–æ –∫–∏ –±–æ—Ç—Ä–æ –∏—Å—Ç–∏—Ñ–æ–¥–∞ –±—É—Ä–¥–∞ —Ç–∞–≤–æ–Ω–µ–¥.
    –ü–∞—Å –∞–∑ –ø–∞—Ö—à –∫–∞—Ä–¥–∞–Ω–∏ /start –∞–≥–∞—Ä –Ω–æ–º —ë –Ω–∞—Å–∞–± —ë –∏–Ω –∫–∏ 
    –Ω–æ–º–∏ –∫–æ—Ä–±–∞—Ä–∞—Ç–æ–Ω —Ö–æ–ª–∏ –±–æ—à–∞–¥ –ø–∞—Å –∞–∑ —à—É–º–æ “≥–∞–º–æ–Ω –Ω–∞–±—É–¥–∞–∞—à—Ä–æ
    –º–µ–ø—É—Ä—Å–∞–¥ —à—É–º–æ –±–æ—à–∞–¥ –æ–Ω—Ä–æ –¥–∞—Ä —á–∞—Ç –Ω–∞–≤–∏—Å–µ–¥. –ü–∞—Å–æ–Ω –¥–∞—Ä –ø–æ—ë–Ω 
    —Ç—É–≥–º–∞“≥–æ –ø–∞–π–¥–æ –º–µ—à–∞–≤–∞–Ω–¥ —Ç—É–≥–º–∞“≥–æ –∏–Ω“≥–æ—è–Ω–¥ "(–ú–∞–Ω –æ–º–∞–¥–∞–º, 
    –ú–∞–Ω —Ä–∞—Ñ—Ç–∞–º, “∂–∞–≤–æ–± –º–µ–≥–∏—Ä–∞–º –≤–∞ –±–∞“≥–æ –¥–æ–¥–∞–Ω)".
    2.–ë–æ –ø–∞—Ö—à –∫–∞—Ä–¥–∞–Ω–∏ —Ç—É–≥–º–∞–∏ "–ú–∞–Ω –æ–º–∞–¥–∞–º" —à—É–º–æ—Ä–æ –¥–∞—Ä –∂—É—Ä–Ω–∞–ª
    “õ–∞–π–¥ –º–µ–∫—É–Ω–∞–¥ –∫–∏ –±–∞ –¥–∞—Ä—Å –æ–º–∞–¥–µ–¥ –∏–Ω—á—É–Ω–∏–Ω–∏ —Å–æ–∞—Ç–∏ –æ–º–∞–¥–∞–∞—Ç–æ–Ω—Ä–æ
    –Ω–∏–∑ “õ–∞–π–¥ –º–µ–∫—É–Ω–∞–¥.–ê–≥–∞—Ä —à—É–º–æ –¥–∞—Ä —Ç—É–ª–∏ —Ä—É–∑ –∏–Ω –∫–æ—Ä—Ä–æ —á–∞–Ω–¥ –±–æ—Ä
    —Ç–∞–∫—Ä–æ—Ä –∫—É–Ω–µ–¥ “≥–∞—Ä –±–æ—Ä –∞–∑ —à—É–º–æ –º–µ–ø—É—Ä—Å–∞–¥ –≤–∞“õ—Ç–∏ –æ–º–∞–¥–∞–∞—Ç–æ–Ω—Ä–æ 
    –∏–≤–∞–∑ –∫–∞—Ä–¥–∞–Ω –º–µ—Ö–æ“≥–µ–¥ –¢–£–≥–º–∞–∏ “≤–ê –≤–∞ –ù–ï –º–µ–±–∞—Ä–æ—è–¥ –≤–∞ —è–∫–µ –∞–∑ 
    –∏–Ω—Ä–æ –ø–∞—Ö—à –∫—É–Ω–µ–¥.
    3.–ë–æ –ø–∞—Ö—à –∫–∞—Ä–¥–∞–Ω–∏ —Ç—É–≥–º–∞–∏ "–ú–∞–Ω —Ä–∞—Ñ—Ç–∞–º" –≤–∞“õ—Ç–∏ —Ä–∞—Ñ—Ç–∞–∏ —à—É–º–æ
    —Å–∞–±—Ç –∫–∞—Ä–¥–∞ –º–µ—à–∞–≤–∞–¥ –≤–∞ –¥—É—é–º –º–∞—Ä–æ—Ç–∏–±–∞ —à—É–º–æ –∏–Ω –∫–æ—Ä—Ä–æ –∞–Ω“∑–æ–º
    –¥–æ–¥–∞ –Ω–∞–º–µ—Ç–∞–≤–æ–Ω–µ–¥ —á—É–Ω –≤–∞“õ—Ç–∏ —Ä–∞—Ñ—Ç–∞–Ω —è–∫ –±–æ—Ä —Å–∞–±—Ç –º–µ—à–∞–≤–∞–¥.
    4.–ë–æ –ø–∞—Ö—à–∏ —Ç—É–≥–º–∞–∏ "“∂–∞–≤–æ–± –º–µ–≥–∏—Ä–∞–º" –ê–∑ —à—É–º–æ —Å–∞–±–∞–±–∏ “∑–∞–≤–æ–± 
    –ø—É—Ä—Å–∏–¥–∞–Ω–∞—Ç–æ–Ω—Ä–æ –º–µ–ø—É—Ä—Å–∞–¥ –≤–∞ “∑–∞–≤–æ–±–∏ –Ω–∞–≤–∏—Å—Ç–∞–∞—Ç–æ–Ω—Ä–æ –±–∞ 
    —É—Å—Ç–æ–¥–∞—Ç–æ–Ω —Ä–∞–≤–æ–Ω –º–µ–∫—É–Ω–∞–¥ –≤–∞ —É—Å—Ç–æ–¥–∞—Ç–æ–Ω –±–∞ —à—É–º–æ –∑–∞–Ω–≥ –º–µ–∑–∞–Ω–∞–¥.
    5.–ë–æ –ø–∞—Ö—à–∏ —Ç—É–≥–º–∞–∏ "–ë–∞“≥–æ –¥–æ–¥–∞–Ω" —è–≥–æ–Ω –∞—Ä–∑—É —à–∏–∫–æ—è—Ç –±–æ—à–∞–¥ —ë –∏–Ω
    –∫–∏ —è–≥–æ–Ω —á–∏ –≥—É—Ñ—Ç–∞–Ω–∏ –±—Ç–æ—à–µ–¥ –Ω–∞–≤–∏—Å–µ–¥!""")
##########################----------------------------------------------------------------------------------------------##########################


#Comandai nishon dodani tugmaho
@bot.message_handler(commands=['buttons']) 
def buttons(message):
    send_message_bot(message.chat.id)
##########################----------------------------------------------------------------------------------------------##########################


#Giriftani nomi guruh
def get_group_name(message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    btns = ['Cpp', 'HTML & CSS', 'Dart', 'Python', 'C Sharp', ' Dot NET', 'J.Script', 'J.Script 2', 'React', 'React 2', 'U–•/UI', 'Cpp Olimpiad', 'Django', 'Graphic design', '–î–∏–≥–∞—Ä']
    buttons = [KeyboardButton(btn) for btn in btns]
    markup.add(*buttons)
    msg = bot.send_message(message.chat.id, '–ù–æ–º–∏ –≥—É—Ä”Ø“≥–∞—Ç–æ–Ω—Ä–æ –∞–∑ –∏–Ω“∑–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥ —ë –∫–∏ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥ üòä', reply_markup=markup)
    bot.register_next_step_handler(msg, process_group_choice)

def process_group_choice(message):
    group_name = message.text
    if group_name == '–î–∏–≥–∞—Ä':
        msg = bot.send_message(message.chat.id, '–ù–æ–º–∏ –≥—É—Ä”Ø“≥–∞—Ç–æ–Ω—Ä–æ –¥–æ—Ö–∏–ª –∫—É–Ω–µ–¥ üòä')
        bot.register_next_step_handler(msg, process_custom_group_name)
    else:
        user_id = message.chat.id
        logging.info(f'Updating group name for user {user_id} to {group_name}')
        update_user_data(user_id, 'group_name', group_name)
        check_user_data_and_ask_for_missing(user_id, message)

def process_custom_group_name(message):
    group_name = message.text
    user_id = message.chat.id
    logging.info(f'Updating custom group name for user {user_id} to {group_name}')
    update_user_data(user_id, 'group_name', group_name)
    check_user_data_and_ask_for_missing(user_id, message)
##########################----------------------------------------------------------------------------------------------##########################


#Ivaz kardani nomi guruh
def update_user_group(user_id, new_group_name):
    conn = connection_database()
    cur = conn.cursor()
    try:
        user_id_str = str(user_id)

        cur.execute("""
            SELECT first_name, last_name, username, phone_number, email, date_of_birth, address, group_name
            FROM api_customeruser
            WHERE user_id = %s
        """, (user_id_str,))
        existing_user = cur.fetchone()

        if not existing_user:
            print(f"No existing user found with user_id: {user_id_str}")
            return

        first_name, last_name, username, phone_number, email, date_of_birth, address, last_group_name = existing_user

        cur.execute("""
            SELECT COUNT(*)
            FROM api_customeruser
            WHERE user_id LIKE %s
        """, (f"{user_id_str}_%",))
        count = cur.fetchone()[0]

        previous_user_id = f"{user_id_str}_{count + 2}"

        cur.execute("""
            UPDATE api_customeruser
            SET is_active = FALSE,
                user_id = %s,
                group_name = %s
            WHERE user_id = %s
        """, (previous_user_id, last_group_name, user_id_str))
        
        
        cur.execute("""
            UPDATE api_comeandwent
            SET user_id = %s
            WHERE user_id = %s
        """, (previous_user_id, user_id_str))
        
       
        cur.execute("""
            UPDATE api_feedback
            SET user_id = %s
            WHERE user_id = %s
        """, (previous_user_id, user_id_str))
        

        cur.execute("""
            INSERT INTO api_customeruser (
                user_id, group_name, registration_date, is_active, first_name, last_name, username, phone_number, email, date_of_birth, address
            )
            VALUES (%s, %s, %s, TRUE, %s, %s, %s, %s, %s, %s, %s)
        """, (
            user_id_str, new_group_name, datetime.now().strftime('%Y-%m-%d %H:%M:%S'), 
            first_name, last_name, username, phone_number, email, date_of_birth, address
        ))
        conn.commit()
        print(f"Group name for user {user_id_str} updated to {new_group_name}")
        bot.send_message(user_id, f"Your previous group was '{last_group_name}'. We have moved you to group '{new_group_name}'.")
        
    except Exception as e:
        print(f'Error: {str(e)}')
    finally:
        close_connection(conn, cur)

def is_user_registered(user_id):
    conn = connection_database()
    cur = conn.cursor()
    try:
        user_id_str = str(user_id)
        cur.execute("SELECT * FROM api_customeruser WHERE user_id = %s", (user_id_str,))
        user = cur.fetchone()
        return user is not None
    except Exception as e:
        print(f'Error: {str(e)}')
        return False
    finally:
        close_connection(conn, cur)

@bot.message_handler(commands=['switch_to_a_new_group'])
def switch_to_a_new_group(message):
    user_id = message.chat.id
    if not is_user_registered(user_id):
        bot.send_message(user_id, '–®—É–º–æ “≥–æ–ª–æ –±–∞ “õ–∞–π–¥ –≥–∏—Ä–∏—Ñ—Ç–∞ –Ω–∞—à—É–¥–∞–µ–¥. –õ—É—Ç—Ñ–∞–Ω —Ñ–∞—Ä–º–æ–Ω–∏ /start -—Ä–æ –∏—Å—Ç–∏—Ñ–æ–¥–∞ –±–∞—Ä–µ–¥.')
        return

    markup = types.InlineKeyboardMarkup()
    ha_btn = types.InlineKeyboardButton('“≤–∞', callback_data='switch_ha')
    ne_btn = types.InlineKeyboardButton('–ù–µ', callback_data='switch_ne')
    markup.add(ha_btn, ne_btn)
    confirmation_message = bot.send_message(user_id, "–ò–Ω —Ñ–∞—Ä–º–æ–Ω –±–∞—Ä–æ–∏ –≥—É–∑–∞—Ä–∏—à –±–∞ –≥—É—Ä—É“≥–∏ –Ω–∞–≤ –∞—Å—Ç. –®—É–º–æ –º—É—Ç–º–∞–∏–Ω “≥–∞—Å—Ç–µ–¥, –∫–∏ –±–∞ –≥—É—Ä—É“≥–∏ –¥–∏–≥–∞—Ä –º–µ–≥—É–∑–∞—Ä–µ–¥? –ê–≥–∞—Ä “≥–∞, –ø–∞—Å —Ç—É–≥–º–∞–∏ '“≤–∞' - —Ä–æ –ø–∞—Ö—à –∫—É–Ω–µ–¥, –∞–≥–∞—Ä –Ω–µ, –ø–∞—Å —Ç—É–≥–º–∞–∏ '–ù–µ' - —Ä–æ –ø–∞—Ö—à –∫—É–Ω–µ–¥.", reply_markup=markup)
    selection_message = bot.send_message(user_id, "–Ø–∫–µ—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥.", reply_markup=types.ReplyKeyboardRemove())

    user_states[user_id] = {
        'confirmation_message_id': confirmation_message.message_id,
        'selection_message_id': selection_message.message_id
    }

user_states = {}

@bot.callback_query_handler(func=lambda call: call.data in ['switch_ha', 'switch_ne'])
def handle_switch_response(call):
    user_id = call.from_user.id
    state = user_states.get(user_id, {})
    confirmation_message_id = state.get('confirmation_message_id')
    selection_message_id = state.get('selection_message_id')

    if confirmation_message_id:
        try:
            bot.delete_message(call.message.chat.id, confirmation_message_id)
        except Exception as e:
            print(f"Failed to delete confirmation message: {e}")

    if selection_message_id:
        try:
            bot.delete_message(call.message.chat.id, selection_message_id)
        except Exception as e:
            print(f"Failed to delete selection message: {e}")

    if call.data == 'switch_ha':
        if not is_user_registered(user_id):
            bot.send_message(user_id, '–®—É–º–æ “≥–æ–ª–æ –±–∞ “õ–∞–π–¥ –≥–∏—Ä–∏—Ñ—Ç–∞ –Ω–∞—à—É–¥–∞–µ–¥. –õ—É—Ç—Ñ–∞–Ω —Ñ–∞—Ä–º–æ–Ω–∏ /start -—Ä–æ –∏—Å—Ç–∏—Ñ–æ–¥–∞ –±–∞—Ä–µ–¥.')
            return
        get_group_name(call.message)
        bot.register_next_step_handler(call.message, process_new_group_name)
    elif call.data == 'switch_ne':
        bot.send_message(user_id, "–ì—É–∑–∞—Ä–∏—à –±–∞ –≥—É—Ä—É“≥–∏ –Ω–∞–≤ –±–µ–∫–æ—Ä –∫–∞—Ä–¥–∞ —à—É–¥.")
        send_message_bot(user_id)

    try:
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
    except Exception as e:
        print(f"Failed to remove inline keyboard: {e}")

def process_new_group_name(message):
    user_id = message.from_user.id
    new_group_name = message.text
    if not new_group_name:
        bot.send_message(user_id, "–ì—É—Ä”Ø“≥–∏ –Ω–∞–≤ –Ω–∞–æ–º–∞–¥. –õ—É—Ç—Ñ–∞–Ω –¥—É–±–æ—Ä–∞ –∫”Ø—à–∏—à –∫—É–Ω–µ–¥.")
        return
    update_user_group(user_id, new_group_name)
    bot.send_message(user_id, f"–®—É–º–æ—Ä–æ –±–∞ –≥—É—Ä”Ø“≥–∏\n'{new_group_name}' –≥—É–∑–∞—Ä–æ–Ω–∏–¥–µ–º.")
##########################----------------------------------------------------------------------------------------------##########################


#Tugmaho
def send_message_bot(user_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    btn1 = types.KeyboardButton('–ú–∞–Ω –æ–º–∞–¥–∞–º ')
    btn2 = types.KeyboardButton('–ú–∞–Ω —Ä–∞—Ñ—Ç–∞–º')
    btn3 = types.KeyboardButton('–î–µ—Ä –º–µ–∫—É–Ω–∞–º')
    btn4 = types.KeyboardButton('“∂–∞–≤–æ–± –º–µ–≥–∏—Ä–∞–º')
    btn5 = types.KeyboardButton('–§–∏–∫—Ä—É –∞–Ω–¥–µ—à–∞“≥–æ –Ω–∏—Å–±–∞—Ç –±–∞ –±–∞—Ä–Ω–æ–º–∞')
    markup.add(btn1, btn2, btn3, btn4, btn5)
    bot.send_message(user_id, '–Ø–∫–µ—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥.', reply_markup=markup)
##########################----------------------------------------------------------------------------------------------##########################


@bot.message_handler()
def handler(message):
    if message.text == '–ú–∞–Ω –æ–º–∞–¥–∞–º':
        add_time_to_come(message.chat.id)
    elif message.text == '–ú–∞–Ω —Ä–∞—Ñ—Ç–∞–º':
        add_time_to_go(message.chat.id)
    elif message.text == '–î–µ—Ä –º–µ–∫—É–Ω–∞–º':
        ask_the_reason_for_the_delay(message.chat.id)
    elif message.text == '“∂–∞–≤–æ–± –º–µ–≥–∏—Ä–∞–º':
        ask_for_absence_reason(message.chat.id)
    elif message.text == '–§–∏–∫—Ä—É –∞–Ω–¥–µ—à–∞“≥–æ –Ω–∏—Å–±–∞—Ç –±–∞ –±–∞—Ä–Ω–æ–º–∞':
        ask_for_feedback(message.chat.id) 


if __name__ == "__main__":
    bot.polling(none_stop=True)

